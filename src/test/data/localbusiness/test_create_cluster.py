import random
from unittest import TestCase

from src.data.localbusiness.create_telephone_geo_cluster import determine_relations


class TestEvidence(TestCase):
    def test_determine_relations(self):
        # Setup
        list1 = [(2, 4), (1, 2), (1, 3), (5, 6)]
        expected_list1 = [(5, 6), (1, 2, 3, 4)]

        #Long list
        list2 = []
        expected_list2 = []
        for i in range(1000, 3000):
            if i < 2999:
                list2.append((i, i+1))
            expected_list2.append(i)

        expected_list2 = [tuple(expected_list2)]

        # Longer list
        list3 = [(4403877, 4403881), (1702760, 1702761), (904418, 904464), (904418, 904467), (904418, 904473),(904418, 904487),
         (904418, 904505), (904423, 904468), (904424, 904438), (904424, 904496), (904425, 904434), (904425, 904436),
         (904425, 904442), (904425, 904447), (904425, 904466), (904425, 904481), (904425, 904485), (904425, 904491),
         (904425, 904493), (904425, 904510), (904425, 904511), (904426, 904435), (904427, 904469), (904427, 904508),
         (904428, 904470), (904428, 904492), (904429, 904471), (904431, 904478), (904432, 904448), (904432, 904470),
         (904432, 904474), (904432, 904483), (904432, 904494), (904432, 904509), (904434, 904436), (904434, 904442),
         (904434, 904447), (904434, 904480), (904434, 904481), (904434, 904485), (904434, 904491), (904434, 904493),
         (904434, 904505), (904434, 904511), (904436, 904442), (904436, 904447), (904436, 904480), (904436, 904487),
         (904436, 904493), (904436, 904505), (904436, 904511), (904437, 904466), (904437, 904477), (904437, 904510),
         (904438, 904496), (904439, 904455), (904442, 904510), (904442, 904511), (904446, 904484), (904447, 904480),
         (904447, 904481), (904447, 904485), (904447, 904491), (904447, 904493), (904447, 904511), (904448, 904470),
         (904448, 904483), (904448, 904494), (904448, 904509), (904450, 904454), (904450, 904457), (904450, 904460),
         (904450, 904461), (904450, 904479), (904450, 904495), (904451, 904476), (904454, 904457), (904454, 904460),
         (904454, 904461), (904454, 904495), (904455, 904475), (904457, 904460), (904457, 904461), (904457, 904479),
         (904457, 904495), (904460, 904461), (904460, 904479), (904464, 904467), (904464, 904473), (904464, 904487),
         (904464, 904503), (904464, 904505), (904465, 904490), (904465, 904509), (904466, 904477), (904466, 904510),
         (904467, 904472), (904467, 904473), (904467, 904487), (904467, 904507), (904469, 904508), (904470, 904483),
         (904470, 904494), (904470, 904509), (904472, 904507), (904473, 904487), (904473, 904507), (904474, 904483),
         (904474, 904494), (904474, 904507), (904477, 904510), (904478, 904488), (904479, 904482), (904480, 904487),
         (904480, 904493), (904480, 904505), (904480, 904511), (904481, 904485), (904481, 904491), (904481, 904493),
         (904483, 904494), (904483, 904509), (904485, 904491), (904485, 904493), (904487, 904505), (904487, 904511),
         (904491, 904493), (904493, 904511), (904494, 904509), (904505, 904511), (1032194, 1032212), (1032194, 1032245),
         (1032196, 1032200), (1032196, 1032236), (1032196, 1032244), (1032196, 1032267), (1032196, 511209),
         (1032200, 1032236), (1032200, 1032244), (1032200, 1032267), (1032200, 511127), (1032201, 511118),
         (1032203, 1032213), (1032206, 1032278), (1032206, 511220), (1032212, 1032245), (1032222, 1032237),
         (1032223, 1032281), (1032224, 1032240), (1032224, 511239), (1032224, 511255), (1032226, 511163),
         (1032229, 1032255), (1032231, 1032269), (1032231, 1032272), (1032231, 511172), (1032231, 511203),
         (1032231, 511264), (1032232, 1032280), (1032233, 1032241), (1032233, 1032242), (1032236, 1032244),
         (1032236, 1032267), (1032236, 511127), (1032236, 511209), (1032240, 511239), (1032240, 511255),
         (1032241, 1032242), (1032243, 1032249), (1032244, 1032267), (1032244, 511127), (1032244, 511209),
         (1032251, 1032276), (1032255, 1032260), (1032259, 511140), (1032259, 511185), (1032259, 511223),
         (1032259, 511230), (1032259, 511231), (1032259, 511232), (1032259, 511282), (1032263, 511278),
         (1032267, 511209), (1032269, 1032272), (1032269, 511172), (1032269, 511203), (1032272, 511172),
         (1032272, 511203), (1032272, 511264), (1032278, 511220), (1032283, 511278), (511115, 511277), (511115, 511286),
         (511116, 511277), (511119, 511138), (511119, 511202), (511119, 511225), (511119, 511261), (511123, 511276),
         (511126, 511207), (511128, 511219), (511128, 511284), (511130, 511163), (511134, 511247), (511138, 511162),
         (511138, 511202), (511138, 511225), (511138, 511261), (511140, 511185), (511140, 511223), (511140, 511231),
         (511140, 511232), (511140, 511282), (511142, 511246), (511149, 511224), (511149, 511283), (511150, 511189),
         (511150, 511226), (511155, 511258), (511158, 511288), (511160, 511256), (511162, 511261), (511164, 511166),
         (511164, 511216), (511166, 511216), (511170, 511175), (511172, 511203), (511177, 511220), (511179, 511245),
         (511185, 511223), (511185, 511231), (511185, 511232), (511185, 511282), (511187, 511235), (511188, 511213),
         (511189, 511226), (511190, 511279), (511193, 511240), (511194, 511254), (511202, 511225), (511202, 511256),
         (511203, 511264), (511213, 511253), (511213, 511266), (511213, 511271), (511219, 511284), (511219, 511287),
         (511223, 511231), (511223, 511232), (511223, 511282), (511224, 511283), (511225, 511256), (511230, 511231),
         (511231, 511232), (511231, 511282), (511232, 511282), (511239, 511255), (511253, 511266), (511253, 511271),
         (511266, 511271), (511267, 511287), (511277, 511286), (768343, 2696000)]

        # Run test
        actual_list1 = determine_relations(list1)
        self.assertCountEqual(expected_list1, actual_list1)

        actual_list2 = determine_relations(list2)
        self.assertCountEqual(expected_list2, actual_list2)

        actual_list3 = determine_relations(list3)
